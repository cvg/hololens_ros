//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.BuiltinInterfaces;

namespace RosMessageTypes.UnityRoboticsDemo
{
    [Serializable]
    public class HeaderMsg : Message
    {
        public const string k_RosMessageName = "unity_robotics_demo_msgs/Header";
        public override string RosMessageName => k_RosMessageName;

        //  Standard metadata for higher-level stamped data types.
        //  This is generally used to communicate timestamped data 
        //  in a particular coordinate frame.
        //  
        //  sequence ID: consecutively increasing ID 
        public uint seq;
        // Two-integer timestamp that is expressed as:
        //  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
        //  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
        //  time-handling sugar is provided by the client library
        public TimeMsg stamp;
        // Frame this data is associated with
        public string frame_id;

        public HeaderMsg()
        {
            this.seq = 0;
            this.stamp = new TimeMsg();
            this.frame_id = "";
        }

        public HeaderMsg(uint seq, TimeMsg stamp, string frame_id)
        {
            this.seq = seq;
            this.stamp = stamp;
            this.frame_id = frame_id;
        }

        public static HeaderMsg Deserialize(MessageDeserializer deserializer) => new HeaderMsg(deserializer);

        private HeaderMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.seq);
            this.stamp = TimeMsg.Deserialize(deserializer);
            deserializer.Read(out this.frame_id);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.seq);
            serializer.Write(this.stamp);
            serializer.Write(this.frame_id);
        }

        public override string ToString()
        {
            return "HeaderMsg: " +
            "\nseq: " + seq.ToString() +
            "\nstamp: " + stamp.ToString() +
            "\nframe_id: " + frame_id.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
